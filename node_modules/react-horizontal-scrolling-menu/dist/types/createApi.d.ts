import React from 'react';
import { ItemsMap } from './ItemsMap';
import type { IOItem, ItemId, ItemOrElement, ScrollBehaviorArg, scrollToItemOptions } from './types';
type ScrollOptions = Omit<scrollToItemOptions, 'behavior'>;
export default function createApi(items: ItemsMap, transitionOptions?: {
    duration?: scrollToItemOptions['duration'];
    behavior?: scrollToItemOptions['behavior'];
    boundary?: React.MutableRefObject<scrollToItemOptions['boundary']>;
}, noPolyfill?: boolean): {
    getItemById: (id: ItemId) => IOItem | undefined;
    getItemElementById: (id: string) => Element | null;
    getItemByIndex: (index: number | string) => IOItem | undefined;
    getItemElementByIndex: (id: string) => Element | null;
    getNextElement: () => IOItem | undefined;
    getPrevElement: () => IOItem | undefined;
    isFirstItemVisible: boolean;
    isItemVisible: (id: ItemId) => boolean;
    isLastItem: (id: ItemId) => boolean;
    isLastItemVisible: boolean;
    scrollNext: (behavior?: ScrollBehaviorArg, inline?: ScrollLogicalPosition, block?: ScrollLogicalPosition, { duration, boundary }?: ScrollOptions) => void;
    scrollPrev: (behavior?: ScrollBehaviorArg, inline?: ScrollLogicalPosition, block?: ScrollLogicalPosition, { duration, boundary }?: ScrollOptions) => void;
    useIsVisible: (itemId: ItemId, defaultValue?: boolean) => boolean;
    scrollToItem: (target?: ItemOrElement, behavior?: ScrollBehaviorArg, inline?: ScrollLogicalPosition, block?: ScrollLogicalPosition, options?: scrollToItemOptions) => void;
};
export interface publicApiType extends ReturnType<typeof createApi> {
    items: ItemsMap;
    scrollContainer: React.RefObject<HTMLElement | null>;
}
export {};
