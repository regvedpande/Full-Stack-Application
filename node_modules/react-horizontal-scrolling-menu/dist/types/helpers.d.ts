/// <reference types="node" />
import React from 'react';
import { observerOptions } from './settings';
import type { Item, ItemOrElement, ItemId, Refs, ScrollBehaviorArg, scrollToItemOptions } from './types';
export declare const getNodesFromRefs: (refs: Refs) => HTMLElement[];
export declare function observerEntriesToItems(entries: IntersectionObserverEntry[], options: typeof observerOptions): Item[];
declare function scrollToItem(item: ItemOrElement, behavior?: ScrollBehaviorArg, inline?: ScrollLogicalPosition, block?: ScrollLogicalPosition, rest?: Omit<scrollToItemOptions, 'behavior'>, noPolyfill?: boolean): void;
export { scrollToItem };
export declare const getItemElementById: (id: ItemId) => Element | null;
export declare const getItemElementByIndex: (id: ItemId) => Element | null;
export declare function getElementOrConstructor(Elem: React.FC | React.ReactNode | React.MemoExoticComponent<any>): React.JSX.Element | null;
export declare const getItemId: (item: React.ReactNode) => string;
export declare const rafTimeout: (func: () => void, delay?: number) => NodeJS.Timeout;
export declare function isMutableRef<T>(elem: React.MutableRefObject<T> | React.RefCallback<T> | React.LegacyRef<T>): elem is React.MutableRefObject<T>;
